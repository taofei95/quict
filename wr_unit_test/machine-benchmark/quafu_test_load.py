#build env
import json
import numpy as np
from quafu import QuantumCircuit
from quafu import User
import scipy.stats
from QuICT.simulation.unitary.unitary_simulator import UnitarySimulator
user = User()
user.save_apitoken('wRyYinzRHl-VDBRQkMWvi0GcQLpKUQVdMhou2iDtAGL.9JDMwczNxgjN2EjOiAHelJCL3QTM6ICZpJye.9JiN1IzUIJiOicGbhJCLiQ1VKJiOiAXe0Jye')

def load_circuit(path):
    from QuICT.tools.interface.qasm_interface import OPENQASMInterface
    cir = OPENQASMInterface.load_file(path).circuit

    return cir


# def qcda_opt(cir):
#     pass


def simu_circuit(cir):
    sim = UnitarySimulator()
    amp1 = sim.run(cir)
    return amp1

# def quafu_run(cir, name:str):
#     qc = QuantumCircuit(5)
#     test_cir = cir.qasm()
#     qc.from_openqasm(test_cir)

#     from quafu import Task
#     task = Task()
#     task.load_account()
#     task.config(backend="ScQ-P10", shots=3000, compile=True, priority=2)
#     res = task.send(qc, name)
#     counts = res.counts
    
#     quafu_dict = res.amplitudes
#     quafu_amp = [0] * (2 ** 5)
#     for key, value in quafu_dict.items():
#         quafu_amp[int(key, 2)] = value

#     return quafu_amp, counts


path = "wr_unit_test/machine-benchmark/randomori.qasm"
cir = load_circuit(path)
amp = simu_circuit(cir)
print(abs(amp))

# path = "wr_unit_test/machine-benchmark/randomopt.qasm"
# ciropt = load_circuit(path)


# print(quafu_run(cir, name=1))
# print(quafu_run(ciropt, name=2))

file1 = ([0.089, 0.08733333333333333, 0.03933333333333333, 0.034666666666666665, 0.04766666666666667, 0.05366666666666667, 0.15933333333333333, 0.09566666666666666, 0.027666666666666666, 0.01633333333333333, 0.016, 0.004666666666666667, 0.011333333333333334, 0.021666666666666667, 0.011333333333333334, 0.015, 0.02, 0.017333333333333333, 0.014333333333333333, 0.011333333333333334, 0.020666666666666667, 0.020666666666666667, 0.03666666666666667, 0.033666666666666664, 0.013666666666666667, 0.009666666666666667, 0.011666666666666667, 0.010666666666666666, 0.012333333333333333, 0.014, 0.008666666666666666, 0.014])
file2 = ([0.11566666666666667, 0.10666666666666667, 0.03833333333333333, 0.056, 0.04933333333333333, 0.033666666666666664, 0.267, 0.11633333333333333, 0.036, 0.03, 0.016666666666666666, 0.012666666666666666, 0.018333333333333333, 0.02266666666666667, 0.02266666666666667, 0.024333333333333332, 0.0016666666666666668, 0.004333333333333333, 0.0023333333333333335, 0.0006666666666666666, 0.0023333333333333335, 0.0026666666666666666, 0.005666666666666667, 0.0026666666666666666, 0.0026666666666666666, 0.002, 0.002, 1e-9, 0.0013333333333333333, 0.0003333333333333333, 0.0023333333333333335, 0.0006666666666666666])
file3 = ([0.13933333333333334, 0.16633333333333333, 0.048, 0.04566666666666667, 0.06766666666666667, 0.050333333333333334, 0.13633333333333333, 0.07733333333333334, 0.047, 0.027666666666666666, 0.03266666666666666, 0.016666666666666666, 0.014666666666666666, 0.014666666666666666, 0.04633333333333333, 0.046, 0.004666666666666667, 0.003, 0.0013333333333333333, 0.0003333333333333333, 0.0023333333333333335, 0.0023333333333333335, 1e-9, 0.0026666666666666666, 0.0013333333333333333, 1e-9, 0.0003333333333333333, 1e-9, 1e-9, 1e-9, 0.002, 0.003])
file4 = ([0.17633333333333334, 0.113, 0.030666666666666665, 0.06133333333333333, 0.02666666666666667, 0.060333333333333336, 0.16466666666666666, 0.10166666666666667, 0.051, 0.056666666666666664, 0.024666666666666667, 0.017666666666666667, 0.023666666666666666, 0.031, 0.027, 0.013333333333333334, 0.0023333333333333335, 0.0006666666666666666, 0.0013333333333333333, 0.0016666666666666668, 0.0006666666666666666, 0.0013333333333333333, 0.0003333333333333333, 0.004666666666666667, 0.001, 0.0013333333333333333, 1e-9, 0.0013333333333333333, 0.003, 1e-9, 1e-9, 0.0006666666666666666])

Q = np.asarray(abs(amp))
p = np.asarray(file1)
q = np.asarray(file2)
m = np.asarray(file3)
n = np.asarray(file4)

def KL_divergence(p, q):
    return scipy.stats.entropy(p, q, base=2)

print((KL_divergence(p, Q) + KL_divergence(Q, p)) /2)
print((KL_divergence(Q, q) + KL_divergence(q, Q)) /2)
print((KL_divergence(m, Q) + KL_divergence(Q, m)) /2)
print((KL_divergence(n, Q) + KL_divergence(Q, n)) /2)


# print(abs(amp1))
# print(abs(amp2))


